{"version":3,"sources":["img/bg_istockphoto-123099333-1024x1024.jpg","app/Theme/index.tsx","components/Text/index.tsx","components/Canvas/index.tsx","components/Logo/index.tsx","components/Heading/index.tsx","components/Subheading/index.tsx","components/About/index.tsx","components/ParallaxInto/index.tsx","views/Home/index.tsx","components/Scaffold/index.tsx","serviceWorker.js","index.jsx","app/App.tsx"],"names":["module","exports","gray","AppColorScheme","primary","primaryVariant","secondary","secondaryVariant","surface","background","error","onPrimary","onSecondary","onSurface","onBackground","onError","DefaultTheme","accentColor","backgroundColor","buttonColor","canvasColor","cardColor","colorScheme","cursorColor","disabledColor","dividerColor","errorColor","focusColor","highlightColor","hintColor","hoverColor","indicatorColor","primaryColor","primaryColorDark","primaryColorLight","scaffoldBackgroundColor","selectedRowColor","AppTheme","Text","as","asProp","children","rest","theme","useTheme","El","css","color","lineHeight","fontSize","fontWeight","textAlign","Canvas","mq","facepaint","map","bp","Logo","display","Heading","paddingLeft","paddingRight","Subheading","fontStyle","margin","About","ParallaxIntro","backgroundImage","amish","height","backgroundAttachment","backgroundPosition","backgroundRepeat","backgroundSize","opacity","Home","Scaffold","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.48cb6742.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg_istockphoto-123099333-1024x1024.2b9d4412.jpg\";","import {} from 'emotion-theming';\nimport React, { FC } from 'react';\n\n// loosely based on flutter theme\n// https://api.flutter.dev/flutter/material/ThemeData-class.html\n\nexport type ColorScheme = {\n    primary: string,\n    primaryVariant: string,\n    secondary: string,\n    secondaryVariant: string,\n    surface: string,\n    background: string,\n    error: string,\n    onPrimary: string,\n    onSecondary: string,\n    onSurface: string,\n    onBackground: string,\n    onError: string,\n};\n\nexport type Color = keyof ColorScheme;\n\n\nexport type GrayScale = {\n    50: string;\n    75: string;\n    100: string;\n    200: string;\n    250: string;\n    300: string;\n    400: string;\n    500: string;\n    600: string;\n    700: string;\n    800: string;\n    900: string;    \n}\n\nexport const gray: GrayScale = {\n    50: '#fafafa',\n    75: '#f8f8f8',\n    100: '#efefef',\n    200: '#E0E0E0',\n    250: '#dcdcdc',\n    300: '#c6c6c6',\n    400: '#BDBDBD',\n    500: '#9E9E9E',\n    600: '#757575',\n    700: '#616161',\n    800: '#4a4a4a',\n    900: '#212121',\n};\n\nexport  const DefaultLightColorScheme: ColorScheme = {\n    primary: '#6200ee',\n    primaryVariant: '#3700b3',\n    secondary: '#03dac6',\n    secondaryVariant: '#018786',\n    surface: 'white',\n    background: 'white',\n    error: '#b00020',\n    onPrimary: 'white',\n    onSecondary: 'black',\n    onSurface: 'black',\n    onBackground: 'black',\n    onError: 'white',\n};\n\nexport const DefaultDarkColorScheme: ColorScheme = {\n    primary: '#bb86fc',\n    primaryVariant: '#3700B3',\n    secondary: '#03dac6',\n    secondaryVariant: '#03dac6',\n    surface: '#121212',\n    background: '#121212',\n    error: '#cf6679',\n    onPrimary: 'black',\n    onSecondary: 'black',\n    onSurface: 'white',\n    onBackground: 'white',\n    onError: 'black',\n};\n\nconst AppColorScheme: ColorScheme = {\n    ...DefaultLightColorScheme,\n    onSurface: gray[600],\n}\n\nexport interface Theme {\n    accentColor: string,\n    backgroundColor: string,\n    buttonColor: string,\n    canvasColor: string,\n    cardColor: string,\n    colorScheme: ColorScheme,\n    cursorColor: string,\n    disabledColor: string,\n    dividerColor: string,\n    errorColor: string,\n    focusColor: string,\n    highlightColor: string,\n    hintColor: string,\n    hoverColor: string,\n    indicatorColor: string,\n    primaryColor: string,\n    primaryColorDark: string,\n    primaryColorLight: string,\n    scaffoldBackgroundColor: string, // The background color for a typical material app or a page within the app. \n    selectedRowColor: string,\n}\n\nconst DefaultTheme: Theme = {\n    accentColor: AppColorScheme.onSecondary,\n    backgroundColor: AppColorScheme.onPrimary, // or background?\n    buttonColor: AppColorScheme.primary,\n    canvasColor: AppColorScheme.background, // todo: maybe a little lighter then scaffold?\n    cardColor: AppColorScheme.surface,\n    colorScheme: AppColorScheme,\n    cursorColor: AppColorScheme.primary,\n    disabledColor: gray[200],\n    dividerColor: gray[400],\n    errorColor: 'red',\n    focusColor: 'blue',\n    highlightColor: AppColorScheme.secondary,\n    hintColor: gray[300],\n    hoverColor: gray[500], // not sure abobut this\n    indicatorColor: AppColorScheme.secondary,\n    primaryColor: AppColorScheme.primary,\n    primaryColorDark: AppColorScheme.primary, // todo: change\n    primaryColorLight: AppColorScheme.primary, // todo\n    scaffoldBackgroundColor: AppColorScheme.background,\n    selectedRowColor: gray[500],\n    \n}\n\nexport const AppTheme: Theme = {...DefaultTheme};\n\n","import React, { FC, HTMLProps } from 'react';\nimport { useTheme } from 'emotion-theming';\nimport { Theme } from '../../app/Theme';\n\ninterface Props extends HTMLProps<HTMLSpanElement> {\n    as?: 'div' | 'span' | 'strong' | 'em' | 'label';\n  }\n\nexport const Text: FC<Props> = ({\n  as: asProp = 'span',\n  children,\n  ...rest\n}) => {\n  const theme = useTheme<Theme>();\n  const El = asProp as any;\n  return (\n    <El\n      css={{\n        color: theme.colorScheme.onSurface,\n        lineHeight: '1.8',\n        fontSize: '16px',\n        fontWeight: '600',\n        textAlign: 'center !important'\n      }}\n      {...rest}\n    >\n      {children}\n    </El>\n  );\n}\n","import React, { FC } from 'react';\n\nexport const Canvas: FC = ({children, ...rest}) => {\n  return (\n    <div css={{\n        paddingTop: '64px !important',\n        paddingBottom: '64px !important',\n        paddingRight: '16px',\n        paddingLeft: '16px',\n        maxWidth: '980px',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        boxSiding: 'inherit',\n        lineHeight: '1.8'\n    }}\n    {...rest}\n    >\n        {children}\n    </div>\n  );\n}\n","import React, { FC } from 'react';\nimport facepaint from 'facepaint';\n\nconst breakpoints = [576, 2000]\n\nconst mq = facepaint(\n  breakpoints.map(bp => `@media only screen and (max-width: 600px)`)\n);\n\nexport const Logo: FC = () => {\n  return (\n    <div css={{\n        whiteSpace: 'nowrap',\n        position: 'absolute',\n        top: '48%',\n        left: '50%',\n        transform: 'translate(-50%,-50%)',\n        boxSizing: 'inherit'\n    }}>\n        <span css={{\n            letterSpacing: '10px',\n            color: '#fff !important',\n            backgroundColor: '#000 !important',\n            padding: '12px 24px !important',\n            textAlign: 'center',\n            fontSize: '24px !important',\n            fontWeight: 600,\n            opacity: 0.6,\n        }}>\n            CALMA\n            <span css={mq({\n                display: ['none', 'inherit'],\n            })}> </span>\n            <span css={mq({\n                display: ['inherit', 'none'],\n            })}> OPTIMAL </span>\n            FOODS\n        </span>\n    </div>\n  );\n}\n","import React, { FC, HTMLProps } from 'react';\nimport { useTheme } from 'emotion-theming';\nimport { Theme } from '../../app/Theme';\n\ninterface Props extends HTMLProps<HTMLSpanElement> {\n    as?: 'div' | 'span' | 'strong' | 'em' | 'label';\n  }\n\nexport const Heading: FC<Props> = ({\n  as: asProp = 'div',\n  children,\n  ...rest\n}) => {\n  const theme = useTheme<Theme>();\n  const El = asProp as any;\n  return (\n\n    <El\n      css={{\n        color: theme.colorScheme.onSurface,\n        lineHeight: '1.8',\n        fontSize: '24px',\n        fontWeight: '600',\n        textAlign: 'center !important',\n        paddingLeft: 'auto',\n        paddingRight: 'auto',\n      }}\n      {...rest}\n    >\n      {children}\n    </El>\n  );\n}\n","import React, { FC, HTMLProps } from 'react';\nimport { useTheme } from 'emotion-theming';\nimport { Theme } from '../../app/Theme';\n\ninterface Props extends HTMLProps<HTMLSpanElement> {\n    as?: 'div' | 'span' | 'strong' | 'em' | 'label';\n  }\n\nexport const Subheading: FC<Props> = ({\n  as: asProp = 'div',\n  children,\n  ...rest\n}) => {\n  const theme = useTheme<Theme>();\n  const El = asProp as any;\n  return (\n\n    <El\n      css={{\n        color: theme.colorScheme.onSurface,\n        lineHeight: '1.8',\n        fontSize: '16px',\n        fontWeight: '500',\n        fontStyle: 'italic',\n        textAlign: 'center !important',\n        margin: '14px'\n      }}\n      {...rest}\n    >\n      {children}\n    </El>\n  );\n}\n","import React, { FC } from 'react';\nimport { Text} from '../Text';\nimport { Canvas } from '../Canvas';\nimport { Logo } from '../Logo';\nimport { Heading } from '../Heading';\nimport { Subheading } from '../Subheading';\n\nexport const About: FC = () => {\n  return (\n    <Canvas css={{\n        height: '370px',\n        maxWidth: '980px',\n    }}\n    > \n        <Logo />\n        <Heading>ABOUT CALMA FOODS</Heading>\n        <Subheading>We Bring Amish Country Into Your Home</Subheading>\n        <p>\n            <Text>\n                It all began in a small store on the northwest side of Chicago. \n                A father and son had an idea of providing all-natural products to consumers. \n                They decided to look for the foods the way their grandparents grew and made it. \n            </Text>\n        </p>\n        <p>\n            <Text>\n                Brought up on small farms in Poland, we understood that the most natural way \n                is to grow foods without pesticides, hormones, and with as little interference \n                against mother nature as possible. With those thoughts, we pursued to find farmers, \n                retailers, and found Calma Foods.\n            </Text>\n        </p>\n        <p>\n            <Text>\n                Calma Foods is a Chicagoland food distribution company of Amish made all-natural products. \n                Settled in America's Midwest hills and valleys, we bring the old fashioned and \n                all-natural way of farming to you. We travel to individual farms weekly to bring back \n                the freshest all natural foods that can only be proven by their taste.\n            </Text>\n        </p>\n        <p>\n            <Text>\n                We believe that food in its natural state with no added preservatives and \n                no harmful chemicals in its soil is the healthiest way of life.\n            </Text>\n        </p>\n    </Canvas>\n  );\n}\n","import React, { FC } from 'react';\nimport facepaint from 'facepaint';\nimport amish from '../../img/bg_istockphoto-123099333-1024x1024.jpg';\n\nconst breakpoints = [576, 768, 992, 1200]\n\nconst mq = facepaint(\n  breakpoints.map(bp => `@media only screen and (mix-width: ${bp}px)`)\n);\n\nexport const ParallaxIntro: FC = () => {\n  return (\n    <div css={mq({\n        backgroundImage: `url(${amish})`,\n        height: 'calc(100vh)',\n        backgroundAttachment: 'fixed',\n        backgroundPosition: ['40% 50%', '45% 50%', '50% 50%', '50% 50%'],\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        opacity: 0.75,\n    })} />\n  );\n}\n","import React from 'react';\nimport { About} from '../../components/About';\nimport { ParallaxIntro } from '../../components/ParallaxInto';\n\nexport const Home = () => (\n    <>\n        <ParallaxIntro />\n        <About />\n    </>\n);\n\n","import React, { FC, HTMLProps } from 'react';\nimport '@emotion/core';\nimport { useTheme } from 'emotion-theming';\nimport { Theme } from '../../app/Theme';\n\nexport const Scaffold: FC<HTMLProps<HTMLDivElement>> = ({\n  children,\n  ...rest\n}) => {\n  const theme = useTheme<Theme>();\n  return (\n    <div\n      css={{\n        backgroundColor: theme.scaffoldBackgroundColor,\n        width: '100%',\n        height: '100vh',\n      }}\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { ThemeProvider } from 'emotion-theming';\nimport { AppTheme } from './Theme';\nimport { Home } from '../views/Home';\nimport { Scaffold } from '../components/Scaffold';\n\nexport const App = () => (\n  <ThemeProvider theme={AppTheme}>\n    <Scaffold>\n      <Home />\n    </Scaffold>\n  </ThemeProvider>\n)\n\n"],"sourceRoot":""}